import { LightningElement,track } from 'lwc';
//inserting new toDos
import addToDo from "@salesforce/apex/ToDoController.addTodo";
//get all current toDos
import getCurrentTodos from "@salesforce/apex/ToDoController.getCurrentTodos";

//Import Statement is used to import from some module from some other export module, ==> To import apex class, object, fields

/* To make lightning web Component , we need to use  ==> import { LightningElement } from 'lwc' (lwc-module)
 & the class need to extends from LightningElement (below code) -- then only it's treated as LWC */

export default class ToDoManager extends LightningElement {
  
    //Property 
    //reactive properties for time and greeting
    @track time = "8:22 AM";
    @track greeting = "Good Morning";  


    //need to maintain some task or todos
    //reactive list property to hold todo items
    @track todos=[];

  //lifecycle method (connectedCallBack) to show current data 
  // connectedCallBack -- it is part of lwc framework -- to initialize component as soon as
  
  connectedCallback() {
    //get current time
    this.getTime();

    //calling local todos array list
   // this.populateTodos();

   //calling server todos list
   //fetch today's todos from server
   this.fetchTodos();


    /*get time periodically after every minute -- setInterval accept function method, 
    Here we are using arrow function, -- duration = 1000*60 (everytime this method will call )*/

    setInterval(() => {
        this.getTime();
      }, 1000 * 60);
 }

 // Instead of Hardcode in property, we can create Date Function in javascript to get current time and greeting 


 /**
   * Get time and parse in human readable format
   * It follows 12 hour format
   */

  getTime() {
    const date = new Date(); /* creating object of Date class */
    const hour = date.getHours();
    const min = date.getMinutes();
     /* Hour - It will return 24 hours format, we need to convert into 12 hour for displaying AM or PM & 
     Greetings as well according to hour ==> setGreeting Method & accepting hour*/

     // set time for time property
     this.time = `${this.getHour(hour)}:${this.getDoubleDigit(
        min
      )} ${this.getMidDay(hour)}`;
     // get greeting (mornig/afternoon/evening/) for greeting property 
     this.setGreeting(hour);
 }


 //Convert 24 hours format to 12 hours format
 getHour(hour) {
    return hour == 0 ? 12 : hour > 12 ? hour - 12 : hour;
  }

 //return AM or PM based on current hour
 getMidDay(hour) {
    return hour >= 12 ? "PM" : "AM";
  }

 //convert single digit to double digit
 getDoubleDigit(digit) {
    return digit < 10 ? "0" + digit : digit;
  }

//return greeting based on current hour
setGreeting(hour) {
    if (hour < 12) {
      this.greeting = "Good Morning";
    } else if (hour >= 12 && hour < 17) {
      this.greeting = "Good Afternoon";
    } else {
      this.greeting = "Good Evening";
    }
  }

  /**
   * Add todos to backend
   * Get todo item based on input box value, and add to Salesforce object
   * Fetch fresh list of todos once inserted
   */
  addToDoHandler(){
  //get input box html element/value
  const inputBox = this.template.querySelector("lightning-input");
  console.log('Input value', inputBox.value);
 
  //Create JavaScript Object 
 //id should be length of todos array
 //todoId -- property in object
//create a new todo object based on input box value
  const todo = {
     //todoId : this.todos.length, //Id will be generated by SF
      todoName : inputBox.value,
      //when Creating toDo , By default the done property is false & property should hold on particular date
      done:false
     // todoDate: new Date() // Date will be generated by SF
  }



  //Calling apex method & passing payload as parameter into apex method
 // todo is a object, we need serialized JSON format and passing payload as string & get response from apex class
   //call addtodo server method to add new todo object
    //serialize todo object before sending to server
  addToDo({payload : JSON.stringify(todo)}).then(response =>{
     console.log("Items Inserted Successfully");
 
     //if the record/item inserted successfully in server and retrive all record/item from server
     this.fetchTodos();

  }).catch(error => {
    console.error("error in inserting todo item " + error);
  });

  //add task/item into array - To add value in array, we can use push method
  // Instead of pushing inputBox Value -  we can pass as object into todos array
 // this.todos.push(todo);

  //Clear the value in inputBox
   inputBox.value = "";
  }


  // this method invoke to get all current todos item from apex class
  /**
   * Fetch todos from server
   * This method only retrives todos for today
   */
  fetchTodos(){
    getCurrentTodos().then(result =>{
      if(result){
      console.log("Retrived todos from server", result.length);
        //update todos property with result
      //after getting result from server , need to set it with todos property
      this.todos = result;
      }
   }).catch(error => {
     console.error("error in fetching todos item " + error);
   });
  }

  //define upDateHandler event in js and it will call child component event through PC html on onupdate event and fetch all records from server
  /**
   * Fetch fresh list of todos once todo is updated
   * This method is called on update event
   */
  upDateHandler(){
    this.fetchTodos();
  }
 
  //define deleteHandler event in js and it will call child component event through PC html on ondelete event and fetch remaining records from server
  /**
   * Fetch fresh list of todos once todo is delete
   * This method is called on delete event
   */
  deleteHandler(){
    this.fetchTodos();
  }
 

  /* get property (reactive Property -- private - it is similar to the function) need to filter todo array &&
   get property to return upcoming/unfinished todos*/

  //Upcoming Tasks
  // get property to return upcoming/unfinished todos
  get upcomingTodos() {
    return this.todos && this.todos.length
      ? this.todos.filter(todo => !todo.done)
      : [];
  }
//Completed Tasks
// get property to return completed todos
  get completedTodos() {
    return this.todos && this.todos.length
      ? this.todos.filter(todo => todo.done)
      : [];
  }

  //passing some sample todoItem to todos array (createing object {} - inside array, 0,1 - it will show upcoming section & 2 - it will show completed section)
  populateTodos(){
    const todos = [{
      todoId : 0,
      todoName : "Feed the dog",
      done : false,
      todoDate : new Date()
    },
    {
      todoId : 1,
      todoName : "wash the car",
      done : false,
      todoDate : new Date()
    },
    {
      todoId : 2,
      todoName : "Feed the cat",
      done : true,
      todoDate : new Date()
    },
  ];
// passing local todos array property list into todos property
  this.todos = todos;

  }
  


}