public class ProductInventoryBySiteController {
    private static String Not_Include_Location{
        get{
            return String.isNotBlank(Not_Include_Location) ? Not_Include_Location : FiligreenConfigurationUtility.getConfigValueByObjectAndKey('Inventory Position','Not_Include_Location');
        }set;
    }
    private static String Order_Status_Approved{
        get{
            return String.isNotBlank(Order_Status_Approved) ? Order_Status_Approved : FiligreenConfigurationUtility.getConfigValueByObjectAndKey('Order','Order_Status_Approved');
        }set;
    }
    private static String Order_Status_Pending{
        get{
            return String.isNotBlank(Order_Status_Pending) ? Order_Status_Pending : FiligreenConfigurationUtility.getConfigValueByObjectAndKey('Order','Order_Status_Pending');
        }set;
    }
    private static String Order_Status_Draft{
        get{
            return String.isNotBlank(Order_Status_Draft) ? Order_Status_Draft : FiligreenConfigurationUtility.getConfigValueByObjectAndKey('Order','Order_Status_Draft');
        }set;
    }
    private static String Receiving_Inspection{
        get{
            return String.isNotBlank(Receiving_Inspection) ? Receiving_Inspection : FiligreenConfigurationUtility.getConfigValueByObjectAndKey('Inventory Location','Receiving_Inspection');
        }set;
    }
    private static String Sales_Order_Line_Status_Allocated{
        get{
            return String.isNotBlank(Sales_Order_Line_Status_Allocated) ? Sales_Order_Line_Status_Allocated : FiligreenConfigurationUtility.getConfigValueByObjectAndKey('Sales Order Line','Sales_Order_Line_Status_Allocated');
        }set;
    }
    private static String Order_Record_Type_Name_Brand{
        get{
            return String.isNotBlank(Order_Record_Type_Name_Brand) ? Order_Record_Type_Name_Brand : FiligreenConfigurationUtility.getConfigValueByObjectAndKey('Order','Order_Record_Type_Name_ Brand');
        }set;
    }
    private static String Order_Record_Type_Name_Retailer{
        get{
            return String.isNotBlank(Order_Record_Type_Name_Retailer) ? Order_Record_Type_Name_Retailer : FiligreenConfigurationUtility.getConfigValueByObjectAndKey('Order','Order_Record_Type_Name_Retailer');
        }set;
    }
    private static String Order_Record_Type_Name_Transfer{
        get{
            return String.isNotBlank(Order_Record_Type_Name_Transfer) ? Order_Record_Type_Name_Transfer : FiligreenConfigurationUtility.getConfigValueByObjectAndKey('Order','Order_Record_Type_Name_Transfer');
        }set;
    }
    public list<productInventoryWrapper>productinventoryList{get;set;}
    public string generatedTime{get;set;}
    public string generatedBy{get;set;}
    public string reportName{get;set;}
    public ProductInventoryBySiteController(){
        string sortfield = apexpages.currentpage().getparameters().get('sortfield');
        string sortOrder = apexpages.currentpage().getparameters().get('sortOrder');
        string searchText = apexpages.currentpage().getparameters().get('searchText');
    	productinventoryList = new List<productInventoryWrapper>();  
        Map<string,Map<String,List<Inventory_Position__c>>>productInventoryMap = getInventoryPositions(sortfield,sortOrder,searchText);
        Map<String,Map<String,list<Order_Line_Item__c>>>orderLineItemProductMap = queryOrderLine(new List<String>(productInventoryMap.keySet()));
        Map<String,List<Sales_Order_Line__c>> productAllocatedSOLMap = querySalesOrderLine(new List<String>(productInventoryMap.keySet()));
        Map<String,String>priceBookMap = queryPriceBook(new List<String>(productInventoryMap.keySet()));
        Map<Id,Product2> productsMap = new Map<Id,Product2> ([SELECT Id, Available_Qty__c FROM Product2 WHERE Id IN : productInventoryMap.keySet()]);
        for(String productId : productInventoryMap.keySet()){
        	map<String,List<Inventory_Position__c>>siteInventoryMap = productInventoryMap.get(productId);            
            Map<String,list<Order_Line_Item__c>>orderLineItemMap = orderLineItemProductMap.containsKey(ProductId) ? orderLineItemProductMap.get(productId) : new Map<String,list<Order_Line_Item__c>>();           
            productinventoryList.addAll(fillWrapperList(productsMap.get(productId),productId,siteInventoryMap,orderLineItemMap,productAllocatedSOLMap,priceBookMap));     
        }
        TimeZone tz = UserInfo.getTimeZone();
        generatedTime = 'As of ' + system.now() + ' ' + tz.getDisplayName();
		generatedBy = 'Generated by ' + UserInfo.getName();
        reportName = 'Product Inventory by Site-' + system.now();
    }
    private static Boolean isCommunityPlusUser{
        get{
            User u = [SELECT Id, Name, User_License__c,  Has_Accepted_Terms__c FROM User WHERE Id=: UserInfo.getUserId()];
        	return 'Customer Community Plus'.equalsIgnoreCase(u.User_License__c) || 'Customer Community'.equalsIgnoreCase(u.User_License__c);
        }
        set;
    }
    private static Map<string,Map<String,List<Inventory_Position__c>>> getInventoryPositions(String sortField,String sortOrder,String searchText){
    	Id brandId = Utility.loggedInUser.AccountId;
        List<String>Not_Include_LocationList = Not_Include_Location != Null && Not_Include_Location != '' ? Not_Include_Location.split(',') : new List<String>();
        string queryStr = 'select Id,Product_Name__r.StockKeepingUnit,Product_Description__c,Product_Name__r.Strain__r.Name,Stocking_UOM__c,Lab_Test_Status__c,';
        queryStr+= 'Product_Name__r.Total_Inventory__c,Product_Name__r.Is_Sample__c,Product_Name__r.Parent_Product__c,Product_Name__r.Allocated_Inventory__c,Product_Name__r.Total_Order_Qty__c,';
        queryStr+= 'Product_Name__r.Available_Qty__c,Qty_On_Hand__c,Qty_Allocated__c,Hold__c,Bin_Location__r.Name,Rack__r.Name,';
        queryStr+= 'Rack_Level__r.Name,Inventory_Location__r.Name,Sales_Order__c,Product_Name__c,Product_Name__r.Strain__c,';
        queryStr+= 'Product_Name__r.Inventory_On_Hold_Qty__c,Product_Name__r.Product_Short_Description__c,Product_Name__r.Name,Site__c,Site__r.Name,Site__r.Warehouse_Name__c,Bin_Location__c,';
        queryStr+= 'Rack_Level__c,Rack__c,Inventory_Location__c,Sales_Order_Line__r.Sales_Order__c,Product_Name__r.Brand_Name__c,';
        queryStr+= 'Sales_Order_Line__r.Sales_Order__r.Name from Inventory_Position__c where Product_Name__c != null AND Site__c != null AND ';
        queryStr+= 'Inventory_Location__r.Name NOT IN: Not_Include_LocationList';
        if(isCommunityPlusUser){
        	queryStr+= ' and Is_Brand_Product__c = true AND (( Product_Name__r.Producer_Name__c =: brandId AND Product_Name__r.White_Labelled__c = false) OR(Product_Name__r.Licensee_Name__c = :brandId AND Product_Name__r.White_Labelled__c = true))';
        }
        if(searchText != ''){
            searchText = '%'+searchText+'%';
            queryStr+= ' AND (Product_Name__r.Name like \''+searchText+'\' OR Product_Name__r.Family like \''+searchText+'\' OR Product_Name__r.Product_Short_Description__c like \''+searchText+'\')';
        }
        queryStr += ' Order by ' + sortField + ' ' + sortOrder;
        list<Inventory_Position__c>inventoryList =  database.query(queryStr);
        Map<string,Map<String,List<Inventory_Position__c>>>productInventoryMap1 = new Map<string,Map<String,List<Inventory_Position__c>>>();
        for(Inventory_Position__c invPos : inventoryList){
        	Map<String,List<Inventory_Position__c>>siteInventoryMap = new Map<String,List<Inventory_Position__c>>();
            List<Inventory_Position__c>inventoryPositionList = new List<Inventory_Position__c>();
            if(productInventoryMap1.containsKey(invPos.Product_Name__c))
            	siteInventoryMap = productInventoryMap1.get(invPos.Product_Name__c);
            if(siteInventoryMap.containsKey(invPos.Site__c))
            	inventoryPositionList = siteInventoryMap.get(invPos.Site__c);   
            inventoryPositionList.add(invPos);
            siteInventoryMap.put(invPos.Site__c,inventoryPositionList);
            productInventoryMap1.put(invPos.Product_Name__c,siteInventoryMap);
        }
        Map<string,Map<String,List<Inventory_Position__c>>>productInventoryMap = new Map<string,Map<String,List<Inventory_Position__c>>>();
        for(String productId : productInventoryMap1.keyset()){
            Map<String,List<Inventory_Position__c>>siteInventoryMap1 = productInventoryMap1.get(productId);
            Map<String,List<Inventory_Position__c>>siteInventoryMap = new Map<String,List<Inventory_Position__c>>();
            for(String siteId : siteInventoryMap1.keyset()){
                List<Inventory_Position__c>inventoryPositionList = siteInventoryMap1.get(siteId);
                Decimal lTInventory,sQHand,sQAllocated;
                lTInventory = sQHand = sQAllocated = 0;
                for(Inventory_Position__c invPos : inventoryPositionList){ 
                    if(invPos.Qty_On_Hand__c != null)
                        sQHand += invPos.Qty_On_Hand__c;
                    if(invPos.Qty_Allocated__c != null)
                        sQAllocated += invPos.Qty_Allocated__c;
                } 
                lTInventory = sQHand + sQAllocated;
                if(lTInventory > 0){
                	siteInventoryMap.put(siteId,inventoryPositionList);
                }   
            }
            if(siteInventoryMap.size() > 0)
            	productInventoryMap.put(productId,siteInventoryMap);
        }
        return productInventoryMap;
    }
	@AuraEnabled
    public static AuraResponse fetchInvenotry(String sortField,String sortOrder,String searchText,integer pageSize,Boolean fromReport){        
        Map<string,Map<String,List<Inventory_Position__c>>>productInventoryMap = getInventoryPositions(sortField,sortOrder,searchText);
        List<String> productList = new List<String>();
        productList.addAll(productInventoryMap.keySet());
        pageSize = fromReport ? pageSize : productList.size(); 
        AuraResponse r = fillCurrentRecordList(productInventoryMap,productList,pageSize,1,pageSize);        
		return r;
    }
    Private Static Map<String,List<Sales_Order_Line__c>> querySalesOrderLine(List<String>productList){
    	Sales_Order_Line__c[] SOLines = [SELECT Id,Name, Sales_Order__c,Sales_Order__r.Opportunity_Name__r.Order__r.State_License__r.Default_Warehouse__c, Qty_Allocated__c , Sales_Order__r.Brand_Quote__r.Opportunity_Name__r.Order__c,Product_Name__c  FROM Sales_Order_Line__c WHERE Status__c =: Sales_Order_Line_Status_Allocated AND Product_Name__c IN : productList AND Qty_Allocated__c != null];
        Map<Id,Sales_Order_Line__c>SOLineMap = new Map<Id,Sales_Order_Line__c>(SOLines);
        Map<String,List<Sales_Order_Line__c>> productAllocatedSOLMap = new Map<String,List<Sales_Order_Line__c>>();
        for(Sales_Order_Line__c SOL: SOLines){        	
            String key = SOL.Sales_Order__r.Brand_Quote__r.Opportunity_Name__r.Order__c + '-'+SOL.Product_Name__c + '-' + SOL.Sales_Order__r.Opportunity_Name__r.Order__r.State_License__r.Default_Warehouse__c;
            if(productAllocatedSOLMap.containsKey(key)){
                productAllocatedSOLMap.get(key).add(SOL);
            }else{
                productAllocatedSOLMap.put(key, new List<Sales_Order_Line__c>{SOL});
            }
        } 
        return productAllocatedSOLMap;
    }
    Private Static Map<String,Map<String,list<Order_Line_Item__c>>> queryOrderLine(List<String>productList){
    	Map<String,Map<String,list<Order_Line_Item__c>>>orderLineItemProductMap = new Map<String,Map<String,list<Order_Line_Item__c>>>();
        for(Order_Line_Item__c orderLineItem : [select id,Product__c,Line_Total_Qty__c,Order__r.State_License__r.Default_Warehouse__c 
                                                from Order_Line_Item__c 
                                                where (OrderLine_Status__c =: '' OR OrderLine_Status__c =: null) AND
                                                ((Order__r.RecordType.Name =: Order_Record_Type_Name_Retailer AND Order__r.Status__c IN (:Order_Status_Pending,:Order_Status_Approved)) OR (Order__r.RecordType.Name IN (:Order_Record_Type_Name_Brand,:Order_Record_Type_Name_Transfer) AND Order__r.Status__c IN(:Order_Status_Approved,:Order_Status_Pending))) AND Product__c IN: productList]){
        	Map<String,List<Order_Line_Item__c>>orderLineItemMap = new Map<String,List<Order_Line_Item__c>>();
            list<Order_Line_Item__c>orderLineItemList = new list<Order_Line_Item__c>();
            if(orderLineItemProductMap.containsKey(orderLineItem.Product__c))
            	orderLineItemMap = orderLineItemProductMap.get(orderLineItem.Product__c);
            if(orderLineItemMap.containsKey(orderLineItem.Order__r.State_License__r.Default_Warehouse__c))
                orderLineItemList = orderLineItemMap.get(orderLineItem.Order__r.State_License__r.Default_Warehouse__c);
            orderLineItemList.add(orderLineItem);
            orderLineItemMap.put(orderLineItem.Order__r.State_License__r.Default_Warehouse__c,orderLineItemList);
            orderLineItemProductMap.put(orderLineItem.Product__c,orderLineItemMap);
        }  
        return orderLineItemProductMap;
    }
    Private Static Map<String,String> queryPriceBook(List<String>productList){
    	Map<String,String>priceBookMap = new Map<String,String>(); 
        Id priceBookId = (Utility.loggedInUser.Contact.Account.Community_Price_Book__c != null? Utility.loggedInUser.Contact.Account.Community_Price_Book__c: null);
        string query = 'select id,(select id from PricebookEntries ';
        if(isCommunityPlusUser && priceBookId != null){
            query += ' where Pricebook2Id =: priceBookId';
        }
        query += ' limit 1) from Product2 where id IN: productList';
        for(Product2 product : database.query(query)){
            if(product.PricebookEntries.size() >0)
        		priceBookMap.put(product.id,product.PricebookEntries[0].id);    
        }
        return priceBookMap;
    }
    public static  AuraResponse fillCurrentRecordList(Map<string,Map<String,List<Inventory_Position__c>>>productInventoryMap,List<String>productList,integer pageSize,integer startRec,integer endRec){
        AuraResponse r = new AuraResponse('ProductInventoryBySiteController.init()');
    	List<productInventoryWrapper>currentRecordsList = new List<productInventoryWrapper>();
        integer s = startRec > 0 ? startRec : 0; 
        integer e = endRec <= productList.size() ? endRec : productList.size();
        Map<Id,Product2> productsMap = new Map<Id,Product2> ([SELECT Id, Available_Qty__c FROM Product2 WHERE Id IN : productList]);
        Map<String,List<Sales_Order_Line__c>> productAllocatedSOLMap = querySalesOrderLine(productList);
        Map<String,Map<String,list<Order_Line_Item__c>>>orderLineItemProductMap = queryOrderLine(productList);            
        Map<String,String>priceBookMap = queryPriceBook(productList);        
        integer addRecordCount = 0 ;
        for(integer i = s>0 ? s-1 : s; i< e;i++){
            if(addRecordCount < pageSize){
                addRecordCount ++;
                string ProductId = productList[i];                 
                map<String,List<Inventory_Position__c>>siteInventoryMap = productInventoryMap.get(ProductId);                
                Map<String,list<Order_Line_Item__c>>orderLineItemMap = orderLineItemProductMap.containsKey(ProductId) ? orderLineItemProductMap.get(ProductId) : new Map<String,list<Order_Line_Item__c>>();                
                currentRecordsList.addAll(fillWrapperList(productsMap.get(ProductId),ProductId,siteInventoryMap,orderLineItemMap,productAllocatedSOLMap,priceBookMap)); 
            }
        } 
        integer totPage = productList.size()/pageSize;
        if(math.mod(productList.size(), pageSize)>0)
            totPage++;
        integer currentPage = (s/pageSize)+1; 
        r.data.put('totelRecords', productInventoryMap);
        r.data.put('productList', productList);
        r.data.put('records',currentRecordsList);
        r.data.put('totelPage',totPage);
        r.data.put('cuurentPage',currentPage);
        r.data.put('pageSize',pageSize);
        r.data.put('startRec',s);
        r.data.put('endRec',e);
        r.data.put('totelRec',productInventoryMap.size());   
        r.data.put('isCommunityPlusUser',isCommunityPlusUser);   
        return r;
    }
    private static List<productInventoryWrapper> fillWrapperList(Product2 product,string productId,map<String,List<Inventory_Position__c>>siteInventoryMap,Map<String,list<Order_Line_Item__c>>orderLineItemMap,Map<String,List<Sales_Order_Line__c>>salesOrderMap,Map<String,String>priceBookMap){
        List<productInventoryWrapper>currentRecordsList = new List<productInventoryWrapper>();
        integer k = 1;
        for(String siteId : siteInventoryMap.keySet()){
            List<Inventory_Position__c>inventoryPositionList = siteInventoryMap.get(siteId);
            Decimal lTInventory,lAInventory,lIHQty,lTOQty,lATSell,sQHand,sQAllocated,sHold,tRIP,soAQ,tRIPH;
            lTInventory = lAInventory = lIHQty = lTOQty = lATSell = sQHand = sQAllocated = sHold = tRIP = soAQ = tRIPH= 0;
            
            List<Order_Line_Item__c>orderLineItemList = orderLineItemMap.containsKey(siteId) ? orderLineItemMap.get(siteId) : new List<Order_Line_Item__c>();
            Set<String> OLI_Keys = new Set<String>();
            for(Order_Line_Item__c orderLineItem : orderLineItemList){
                system.debug('##lTOQty :'+orderLineItem.Line_Total_Qty__c);
                lTOQty += orderLineItem.Line_Total_Qty__c;
                
                String key = orderLineItem.Order__c + '-' + productId + '-' + siteId;  
                OLI_Keys.add(key);
                
            }           
            for(String key :OLI_Keys){
                List<Sales_Order_Line__c>salesOrderList = salesOrderMap.containsKey(key) ? salesOrderMap.get(key) : new List<Sales_Order_Line__c>();
                for(Sales_Order_Line__c SOL: salesOrderList){
                    system.debug('##soAQ :'+SOL.Qty_Allocated__c);
                    soAQ += SOL.Qty_Allocated__c;	    
                }
            }
            /*List<Order_Line_Item__c>orderLineItemList = orderLineItemMap.containsKey(siteId) ? orderLineItemMap.get(siteId) : new List<Order_Line_Item__c>();
            for(Order_Line_Item__c orderLineItem : orderLineItemList){
                lTOQty += orderLineItem.Line_Total_Qty__c;
                
                String key = orderLineItem.Order__c + '-' + productId + '-' + siteId;                
                List<Sales_Order_Line__c>salesOrderList = salesOrderMap.containsKey(key) ? salesOrderMap.get(key) : new List<Sales_Order_Line__c>();
                for(Sales_Order_Line__c SOL: salesOrderList){
                    soAQ += SOL.Qty_Allocated__c;	    
                }
            } */          
            
            for(Inventory_Position__c invPos : inventoryPositionList){
                if(invPos.Qty_On_Hand__c != null)
                    sQHand += invPos.Qty_On_Hand__c;
                if(invPos.Qty_Allocated__c != null)
                    sQAllocated += invPos.Qty_Allocated__c;
                if(invPos.Hold__c)
                    sHold ++;              
                if(invPos.Qty_On_Hand__c != null && invPos.Hold__c)
                    lIHQty += invPos.Qty_On_Hand__c;  
                if(invPos.Inventory_Location__c != null && invPos.Inventory_Location__r.Name == Receiving_Inspection && invPos.Qty_On_Hand__c != null)
                	tRIP += invPos.Qty_On_Hand__c; 
                if(invPos.Inventory_Location__c != null && invPos.Inventory_Location__r.Name == Receiving_Inspection && invPos.Qty_On_Hand__c != null && invPos.Hold__c)
                	tRIPH += invPos.Qty_On_Hand__c; 
            }
            lIHQty = lIHQty - tRIPH;
            decimal tempQHand = sQHand;
            lTInventory = sQHand + sQAllocated;            
            lAInventory = sQAllocated;
            lTOQty = lTOQty - soAQ;
            //lATSell = tempQHand - lIHQty - tRIP - lTOQty;
            //Available to sell = Total Inventory{Site) - Receiving - Order qty - OnHold - Allocated.
            system.debug('##lATSell : '+inventoryPositionList[0].Product_Name__r.Name+'--'+inventoryPositionList[0].Site__r.Name+'--> '+lTInventory +'-'+tRIP+'-'+ lTOQty +'-'+ lIHQty+'-'+ lAInventory);
            lATSell = lTInventory - tRIP - lTOQty - lIHQty - lAInventory;
            sQHand = sQHand - tRIP;
            string pId = productId;
            string pId1 = productId;
            if(inventoryPositionList[0].Product_Name__r.Is_Sample__c && inventoryPositionList[0].Product_Name__r.Parent_Product__c != null){
				pId = inventoryPositionList[0].Product_Name__r.Parent_Product__c;              
            }
            if(k > 1)
                pId = '';        
            
            productInventoryWrapper pio = new productInventoryWrapper(siteInventoryMap.size(),inventoryPositionList[0].Product_Name__r.Brand_Name__c,inventoryPositionList[0].Product_Name__r.Product_Short_Description__c,pId,pId1,priceBookMap.get(pId),inventoryPositionList[0].Product_Name__r.Name,inventoryPositionList[0].Site__r.Warehouse_Name__c,siteId,lTInventory,lAInventory,lIHQty,lTOQty,lATSell,sQHand,sQAllocated,sHold,tRIP);//product.Available_Qty__c
            currentRecordsList.add(pio);
            k++;        
            
        }
        return currentRecordsList;
    }
    @AuraEnabled
    public static AuraResponse changePageRecords(string productInventoryWrapperData,String productListData,integer pageSize,integer startRec,integer endRec){
        Map<string,Map<String,List<Inventory_Position__c>>>productInventoryWrapperMap = (Map<string,Map<String,List<Inventory_Position__c>>>)JSON.deserialize(productInventoryWrapperData, Map<string,Map<String,List<Inventory_Position__c>>>.class);
        List<string> productList = (List<string>)JSON.deserialize(productListData, List<string>.class);
    	return fillCurrentRecordList(productInventoryWrapperMap,productList,pageSize,startRec,endRec);   
    }
    @AuraEnabled(cacheable=true)
    public static AuraResponse getAvailableInventoryIds(Map<String, Object> filters,String productId){
    	AuraResponse r = new AuraResponse('ProductInventoryBySiteController.getAvailableInventoryIds()');        
        String orderByField = '';
        String direction = '';
        String orderBy = ''; 
        if(filters != null){
            if(ProductsCtlr.hasFilter(filters, 'orderByField')){
                orderByField = String.valueOf(filters.get('orderByField'));
                if(ProductsCtlr.hasFilter(filters, 'isASC')){
                    direction = ((Boolean.valueOf(filters.get('isASC')))? 'ASC' : 'DESC');
                }
            }
        }
        if(String.isNotBlank(orderByField) && String.isNotBlank(direction)){
            orderBy = (orderByField + ' ' + direction);
        }
        List<Id> ids = new List<Id>();
        String queryStr = 'SELECT Id From Inventory_Position__c WHERE Inventory_Location__r.Include_in_Inventory__c = true AND Product_Name__c =: productId';
        queryStr+= ' ORDER BY ' + String.escapeSingleQuotes(orderBy);
        for(Inventory_Position__c invPos : database.query(queryStr)){
        	ids.add(invPos.Id);    
        }
        r.data.put('ids', ids);
        return r;
    }
    @AuraEnabled(cacheable=true)
    public static AuraResponse getAvailableInventory(List<String> ids, Map<String, Object> filters){
        AuraResponse r = new AuraResponse('ProductInventoryBySiteController.getAvailableInventory()');
        String orderByField = '';
        String direction = '';
        String orderBy = '';
        List<Inventory_Position__c>availableInventoryList = new List<Inventory_Position__c>();
        if(filters != null){
            if(ProductsCtlr.hasFilter(filters, 'orderByField')){
                orderByField = String.valueOf(filters.get('orderByField'));
                if(ProductsCtlr.hasFilter(filters, 'isASC')){
                    direction = ((Boolean.valueOf(filters.get('isASC')))? 'ASC' : 'DESC');
                }
            }
        }
        if(String.isNotBlank(orderByField) && String.isNotBlank(direction)){
            orderBy = (orderByField + ' ' + direction);
        }
        String queryStr = 'SELECT Id,Hold__c,Name,Site__c,Site__r.Name,Inventory_Location__c,Qty_Allocated__c,Qty_On_Hand__c,';
        queryStr += 'Inventory_Location__r.Name,Rack__c,Rack__r.Name,Rack_Level__c,Rack_Level__r.Name,Bin_Location__r.Name,';
        queryStr += 'Bin_Location__c,Ownership__r.Name,Receiving_Line__r.Purchase_Order_Line__r.Purchase_Order__r.Name,';
        queryStr += 'Ownership__c,Sales_Order_Line__r.Name,Date_Received__c,Harvest_Batch_Code__c,Harvest_Batch_Code__r.Name,';
        queryStr += 'UID_New__c,UID_New__r.Name,Lab_Test_Status__c from Inventory_Position__c WHERE Id IN :ids';
        queryStr+= ' ORDER BY ' + String.escapeSingleQuotes(orderBy);
        
        for(Inventory_Position__c invPos : database.query(queryStr)){
        	availableInventoryList.add(invPos);    
        }
        r.data.put('availableInventoryList', availableInventoryList);
        return r;
    }
    public class productInventoryWrapper{
        @AuraEnabled
        public Integer rowSpan{get;set;}
        @AuraEnabled
        public String brandName{get;set;}
    	@AuraEnabled
        public String productName{get;set;}
        @AuraEnabled
        public String productId{get;set;}
        @AuraEnabled
        public String productId1{get;set;}
        @AuraEnabled
        public String priceBookId{get;set;}
        @AuraEnabled
        public String SKU{get;set;}
        @AuraEnabled
        public String siteName{get;set;}
        @AuraEnabled
        public String siteId{get;set;}
        @AuraEnabled
        public Decimal largestTotalInventory{get;set;}
        @AuraEnabled
        public Decimal largestAllocatedInventory{get;set;}
        @AuraEnabled
        public Decimal largestInvnetoryHoldQty{get;set;}
        @AuraEnabled
        public Decimal largestTotalOrdQty{get;set;}
        @AuraEnabled
        public Decimal largestAvailableToSell{get;set;}
        @AuraEnabled
        public Decimal sumQtyHand{get;set;}
        @AuraEnabled
        public Decimal sumQtyAllocated{get;set;}
        @AuraEnabled
        public Decimal sumHold{get;set;}
        @AuraEnabled
        public Decimal totalReceivingIP{get;set;}
        public productInventoryWrapper(integer rSpan,string bName,string pName,string pId,string pId1,string pBId,string s,string sName,string sId,decimal lTInventory,decimal lAInventory,decimal lIHQty,decimal lTOQty,decimal lATSell,decimal sQHand,decimal sQAllocated,decimal sHold,decimal tRIP){
        	rowSpan = rSpan;
            brandName = bName;
            productName = pName;
            productId = pId;
            productId1 = pId1;
            priceBookId = pBId;
            SKU = s;
            siteName = sName;
            siteId = sId;
            largestTotalInventory = lTInventory;
			largestAllocatedInventory = lAInventory;
			largestInvnetoryHoldQty = lIHQty;
            largestTotalOrdQty = lTOQty;
            largestAvailableToSell = lATSell;
            sumQtyHand = sQHand;
            sumQtyAllocated = sQAllocated;
            sumHold = sHold;
            totalReceivingIP = tRIP;
        }        
    }
}